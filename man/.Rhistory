354/463*182.2
28*13
(8915.67-6.98)/100
2013/22.6
2013/1355*60
library(superdelta2)
?SuperDeltaWeighted
?substr_by_cha
help(package="MASS")
2332/1547*60
2332/1552*60
408/226*60
135/73*60
2013/1187*60
144/94*60
2013/20.7
2013/1213*60
library(superdelta)
library(superdelta2)
data(qAbundanceDist)
load("/home/yuhang/Dropbox/Superdelta_Ahead_Study/Reports/Simu/Simu_Voom/qc.RData")
45%%10
39%%10
paste0("ss20_sim", k, ".png")
k<-30
paste0("ss20_sim", k, ".png")
alpha <- rbeta(100, 0.4, 0.6)
sum (alpha >= 0.8)
hist(alpha, main = "Beta prior of Mixture Gaussian", ylab = "Freq", xlab = "alpha")
fc1 <- function(n, alpha){
if (length(alpha) != n){
stop("Input alpha must match number of true signals")
}
idx1 <- which(alpha < 0.8); idx2 <- setdiff(1:n, idx1)
aaa <- numeric(n)
aaa[idx1] <- rnorm(length(idx1), 2, 0.5)
aaa[idx2] <- rnorm(length(idx2), 5, 1)
for (i in 1:n){
aaa[i] <- max(aaa[i], 1.2)
}
return(aaa)
}
my.fc <- fc1(n = 100, alpha = alpha)
hist(my.fc, main = "True Effect Size", ylab = "Freq", xlab = "FC")
sum(my.fc >= 4); sum(my.fc >= 1.2)
F2C <- function(x){
return((x-32)*5/9)
}
#F2C(c(77,86,95))
comp <- function(x, y){
return(sum(x - y))
}
## Tax calculation
Tax_calc <- function(Base, Bonus, Prop401k, StateTaxCutoff, StateTaxRate, OtherFee){
TotIncome <- Base*(1 + Bonus)
#if (TotIncome >= 157000){
#stop("You need to work super hard to achieve this goal!")
#}
Amount401k <- Base*Prop401k
TaxableIncome <- TotIncome - Amount401k
FedTaxCutoff <- c(0, 9700, 39475, 84200, 160725, 204100, 510300)
FedTaxRate <- c(0.1, 0.12, 0.22, 0.24, 0.32, 0.35)
Fedind <- min(which(FedTaxCutoff >= TaxableIncome))
Stateind <- min(which(StateTaxCutoff >= TaxableIncome))
FedTax <- sum(diff(FedTaxCutoff)[1:(Fedind-2)]*FedTaxRate[1:(Fedind-2)]) + (TaxableIncome-FedTaxCutoff[Fedind-1])*FedTaxRate[Fedind-1]
StateTax <- sum(diff(StateTaxCutoff)[1:(Stateind-2)]*StateTaxRate[1:(Stateind-2)]) + (TaxableIncome-StateTaxCutoff[Stateind-1])*StateTaxRate[Stateind-1]
NetIncome <- TaxableIncome - FedTax - StateTax - OtherFee
Summary.Income <- c(NetIncome, Amount401k, FedTax, StateTax)
names(Summary.Income) <- c("NetIncome", "Retirement", "FedTax", "StateTax")
return(Summary.Income)
}
Tax_calc(Base = 85000, Bonus = 0.00, Prop401k = 0.12, StateTaxCutoff = c(0, 8015, 19001, 29989, 41629, 52612, 268750),
StateTaxRate = c(1, 2, 4, 6, 8, 9.3)/100, OtherFee = 3025) ## Bay Area Other / Southern California
Tax_calc(Base = 140000, Bonus = 5.15/14, Prop401k = 0.12, StateTaxCutoff = c(0, 8015, 19001, 29989, 41629, 52612, 268750),
StateTaxRate = c(1, 2, 4, 6, 8, 9.3)/100, OtherFee = 3875) ## Bay Area Google
1913/20.7/(119.93389/191.5*154)*480
(119.93389/191.5*154)+55.080586
(3356 + 70 + 231 + 80*365.25/12/7 + 268.75 + 230 + 31.6*365.25/12 + 1000)
(3356 + 70 + 231 + 80*365.25/12/7 + 268.75 + 230 + 31.6*365.25/12 + 1000)/1000*12
1913/20.7/(119.93389/191.5*154)*480
(119.93389/191.5*154)+55.080586
(3356 + 70 + 231 + 80*365.25/12/7 + 268.75 + 230 + 31.6*365.25/12 + 1000)/1000*12*1.2
151.53-93.10
(119.93389/191.5*154)
Tax_calc(Base = 130000, Bonus = 0.15, Prop401k = 0.12, StateTaxCutoff = c(0, 8015, 19001, 29989, 41629, 52612, 268750),
StateTaxRate = c(1, 2, 4, 6, 8, 9.3)/100, OtherFee = 3875) ## Bay Area Other Data Science
(119.93389/191.5*154) + 55.080586
93.838286 + 55.080586
(3356 + 70 + 231 + 80*365.25/12/7 + 268.75 + 230 + 31.6*365.25/12 + 1000)/1000*12*1.15
148.92-89.22
6.4+1+4*6
6.4+1+4*6+20
136*0.375
136*0.625
38*1.609
365.25/12/7*5
38*2*22/30
38*2*22/30*3.369
38*2*22/30*3.369*4/3
(3356 + 70 + 231 + 80*365.25/12/7 + 268.75 + 250 + 25.6*365.25/12 + 1000)/1000*12*1.15
(119.93389/191.5*154) + 55.080586
93.838286 + 55.080586
148.92-86.98
6.4+1+4*6.2+20
Tax_calc(Base = 90000, Bonus = 0.00, Prop401k = 0.12, StateTaxCutoff = c(0, 8015, 19001, 29989, 41629, 52612, 268750),
StateTaxRate = c(1, 2, 4, 6, 8, 9.3)/100, OtherFee = 3025) ## Bay Area Other / Southern California
93.838286 + 58.103386
151.94-86.98
6.4+1+4*6.5+20
Tax_calc(Base = 140000, Bonus = 5.15/14, Prop401k = 0.12, StateTaxCutoff = c(0, 8015, 19001, 29989, 41629, 52612, 268750),
StateTaxRate = c(1, 2, 4, 6, 8, 9.3)/100, OtherFee = 3875) ## Bay Area Google
Tax_calc(Base = 140000, Bonus = 5.15/14, Prop401k = 0.12, StateTaxCutoff = c(0, 8015, 19001, 29989, 41629, 52612, 268750),
StateTaxRate = c(1, 2, 4, 6, 8, 9.3)/100, OtherFee = 3675) ## Bay Area Google
2924886/2591648
6854951/5985413
93/0.4536
92/0.4536
91.7/0.4536
2332/1110/1.609
2311-4+7-5
2309/1110/1.609
6.99+5.86+25.51+21.55+22.8
6.99+5.86+25.51+21.55+22.8+23
6.99+5.86+25.51+21.55+22.8+65
151931*4.13/100
151931*4.13/100+58970*2.25/100
151931*4.13/100+58970*2.25/100+76648*1.90/100
53232*1.71/100
60/1.67^2
55/1.62^2
50/1.67^2
55/1.62^2/(89.8/1.78^2)
736800*0.63/100
736800*0.63/100+29394*0.85/100
(12.99*3-1)
(12.99*3-1)*1.085
12723*1.33/100
736800*0.63/100+29394*0.85/100+12723*1.33/100
3278488/329
1968.29+395.91
1968.29+395.91-419.89
1968.29+395.91-419.89+15.69
95.91+46.38+60.91+49.11+47.62+59.35+30+49.43
95.91+46.38+60.91+49.11+47.62+59.35+30+49.43+45.06+7.98+16.91+48.52+49.08+18.98+41.47+12.99+24.49+74.98+23.9+28.86+16.8+39.75
389/732*1110
636-389/732*1110
343*389/732
343*343/389
45.99*1.0825
49.78*7.08
44.99*1.0825*7.08
44.99*1.0825*7.08/289
28+22+2+37+35
31+37+23+21+49
83+47+5+27+29
83+47+5+27+29+33+26+7
31+37+23+21+49+31+31
28+22+2+37+35+55+10+15+17
1587/872*60
1587/869*60
1258/18.75
1258/(18.75*60-71)*60
1258/(18.75*60-73)*60
67/231
0.96+2.98+1.68+2.71+3.29+3.12+4.36+1.57+0.76+4.44+3.54+2.37+4.14+1.49+11.99+6.59+2.49+3.13+9.47
0.96+2.98+1.68+2.71+3.29+3.12+4.36+1.57+0.76+4.44+3.54+2.37+4.14+1.49+11.99+6.59+2.49+3.13+8.47
0.96+2.98+1.68+2.71+3.29+3.12+4.36/2+1.57+0.76+4.44+3.54+2.37+3.61+1.49+11.99+6.59+2.49+3.13+8.47+1.59
40/68.98
40/68.98*1110-636
0.96+2.38+1.68+2.71+3.29+3.12+4.36/2+1.57+0.76+4.44+3.54+2.37+3.59+1.49+11.99+6.59+2.49+3.13+8.47+1.59
(2.89+4.99)*1.085
(2.89+4.99+3.99)*1.085
0.96+2.38+1.68+2.71+3.29+3.12+4.36/2+1.57+0.76+4.44+3.54+2.37+3.59+1.49+11.99+6.59+2.49+12.88+1.59
(2.89+3.99)*1.085
0.96+2.38+1.68+2.71+3.29+3.12+4.36/2+1.57+0.76+4.44+3.54+2.37+3.59+1.49+11.99+6.59+2.49+7.46+1.59
0.96+2.38+1.68+2.71+3.29+3.12+4.36/2+1.57+0.76+4.44+3.54+2.37+3.59+1.49+11.99+6.59+2.49
36.71-31.90
365*0.89-304
216+40
F2C <- function(x){
return((x-32)*5/9)
}
C2F <- function(x){
return(x/5*9+32)
}
#F2C(c(77, 86, 95))
#C2F(c(20, 25, 30))
comp <- function(x, y){
return(sum(x - y))
}
## Tax calculation
Tax_calc <- function(Base, Bonus, Prop401k, StateTaxCutoff, StateTaxRate, OtherFee){
TotIncome <- Base*(1 + Bonus)
#if (TotIncome >= 157000){
#stop("You need to work super hard to achieve this goal!")
#}
Amount401k <- Base*Prop401k
Medicare <- TotIncome*0.029/2 + max(TotIncome-200000, 0)*0.009
SSecurity <- min(TotIncome, 137700)*0.124/2
TaxableIncome <- TotIncome - Amount401k
FedTaxCutoff <- c(0, 9875, 40125, 85525, 163300, 207350, 518400)
FedTaxRate <- c(0.1, 0.12, 0.22, 0.24, 0.32, 0.35)
Fedind <- min(which(FedTaxCutoff >= TaxableIncome))
Stateind <- min(which(StateTaxCutoff >= TaxableIncome))
FedTax <- sum(diff(FedTaxCutoff)[1:(Fedind-2)]*FedTaxRate[1:(Fedind-2)]) + (TaxableIncome-FedTaxCutoff[Fedind-1])*FedTaxRate[Fedind-1]
StateTax <- sum(diff(StateTaxCutoff)[1:(Stateind-2)]*StateTaxRate[1:(Stateind-2)]) + (TaxableIncome-StateTaxCutoff[Stateind-1])*StateTaxRate[Stateind-1]
NetIncome <- TaxableIncome - FedTax - StateTax - OtherFee - Medicare - SSecurity
Summary.Income <- c(NetIncome, Amount401k, FedTax, StateTax, Medicare, SSecurity)
names(Summary.Income) <- c("NetIncome", "Retirement", "FedTax", "StateTax", "Medicare", "SSecurity")
return(Summary.Income)
}
Tax_calc(Base = 120000, Bonus = 0.15, Prop401k = 0.12, StateTaxCutoff = c(0, 3000, 5000, 17000, 200000),
StateTaxRate = c(2, 3, 5, 5.75)/100, OtherFee = 3600) ## Virginia
Tax_calc(Base = 120000, Bonus = 0.15, Prop401k = 0.10, StateTaxCutoff = c(0, 3000, 5000, 17000, 200000),
StateTaxRate = c(2, 3, 5, 5.75)/100, OtherFee = 3600) ## Virginia
22*2.54
Tax_calc(Base = 140000, Bonus = 0.15, Prop401k = 0.10, StateTaxCutoff = c(0, 3000, 5000, 17000, 200000),
StateTaxRate = c(2, 3, 5, 5.75)/100, OtherFee = 3600) ## Virginia
Tax_calc(Base = 120000, Bonus = 0.15, Prop401k = 0.10, StateTaxCutoff = c(0, 3000, 5000, 17000, 200000),
StateTaxRate = c(2, 3, 5, 5.75)/100, OtherFee = 3600) ## Virginia
library(genefilter)
library(pROC)
library(car)
## library(onewaytests)
library(superdelta2)
library(limma)
library(edgeR)
library(statmod) #required by egdeR
library(DESeq2)
Sim1 <- function(nus, ns, kappa, a, l, u){
mm <- sapply(nus, length); G <- length(mm)
if (var(mm) !=0) {
stop("nus must be a list of three vectors of mean counts with the same lengths.") } else {
ngenes <- mm[1]
}
X <- NULL
for (g in 1:G){
gg <- nus[[g]]^(2-a)/kappa; pg <- gg/(nus[[g]]+gg)
Xg <- t(sapply(1:ngenes, function(i) rnbinom(ns[1], size=gg[i], prob=pg[i])))
X <- cbind(X,Xg)
}
## add sample specific noise
alphas <- runif(n1+n2+n3, min=l, max=u)
Y <- round(sweep(X, 2, alphas, "*"))
## return the counts
return(Y)
}
############################################################
## H-T based on super-delta and limma
############################################################
## this is the main wrapper function that conducts all tests in one
## line. To avoid unnecessary complications, I decide to use
## unadjusted p-values for comparison in this wrapper.  For
## simplicity, right now this function only works for *three groups*
## cases with the specific "Groups" input!!
wrapperfun <- function(counts, Groups, W, methods=c("SuperDelta", "rowFtests", "limma", "edgeR", "DESeq2"), trim=0.2) {
## some useful objects
design2 <- model.matrix(~ 0 + Groups)
mycontrast <- makeContrasts(AvB=GroupsA - GroupsB,
AvC=GroupsA - GroupsC,
BvC=GroupsB - GroupsC, levels = design2)
coldata <- data.frame(Group = factor(Groups))
colnames(coldata) <- "Groups"
## the main computation
ptables <- list()
for (mm in methods) {
if (mm=="SuperDelta") {
mod <- SuperDeltaWeighted(mydata=counts, offset=1, Grps=Groups,
W=NULL, trim=trim)
pt <- mod$pvalues.t; colnames(pt) <- c("AvB", "AvC", "BvC")
ptab <- cbind("overall"=mod$pvalues.F, pt)
} else if (mm=="rowFtests") {
logcounts <- log2(counts+1)
logA <- logcounts[, Groups=="A"]
logB <- logcounts[, Groups=="B"]
logC <- logcounts[, Groups=="C"]
G.AB <- Groups[Groups %in% c("A", "B")]
G.AC <- Groups[Groups %in% c("A", "C")]
G.BC <- Groups[Groups %in% c("B", "C")]
pF <- rowFtests(logcounts, fac=factor(Groups))[, "p.value"]
pt.AvB <- rowttests(cbind(logA, logB), fac=factor(G.AB))[,"p.value"]
pt.AvC <- rowttests(cbind(logA, logC), fac=factor(G.AC))[,"p.value"]
pt.BvC <- rowttests(cbind(logB, logC), fac=factor(G.BC))[,"p.value"]
ptab <- cbind("overall"=pF, "AvB"=pt.AvB, "AvC"=pt.AvC, "BvC"=pt.BvC)
} else if (mm=="limma") {
y <- voom(counts, design2, plot = FALSE)
## y$genes$Status <- status
fit <- lmFit(y, design2)
fit2 <- contrasts.fit(fit, mycontrast)
fit2 <- eBayes(fit2)
ptab <- cbind("overall"=fit2$F.p.value, fit2$p.value)
} else if (mm=="edgeR") {
dge <- calcNormFactors(DGEList(counts = counts))
z <- estimateDisp(dge, design2, robust = TRUE)
fit <- glmQLFit(z, design2, robust = TRUE)
anov1 <- glmQLFTest(fit, contrast = mycontrast)
#topTags(anov1)
qlf.AvB <- glmQLFTest(fit, contrast = mycontrast[,"AvB"])
qlf.AvC <- glmQLFTest(fit, contrast = mycontrast[,"AvC"])
qlf.BvC <- glmQLFTest(fit, contrast = mycontrast[,"BvC"])
ptab <- cbind("overall"=anov1$table$PValue, "AvB"=qlf.AvB$table$PValue,
"AvC"=qlf.AvC$table$PValue, "BvC"=qlf.BvC$table$PValue)
} else if (mm=="DESeq2") {
dds <- DESeqDataSetFromMatrix(countData = counts, colData = coldata,
design = ~ Groups)
dds <- DESeq(dds, test = "LRT", reduced= ~ 1)
rr <- as.data.frame(results(dds))
ddsPairwise <- DESeq(dds)
rr.AvB <- results(ddsPairwise, contrast = c("Groups", "A", "B"))
rr.AvC <- results(ddsPairwise, contrast = c("Groups", "A", "C"))
rr.BvC <- results(ddsPairwise, contrast = c("Groups", "B", "C"))
ptab <- cbind("overall"=rr$pvalue, "AvB"=rr.AvB$pvalue,
"AvC"=rr.AvC$pvalue, "BvC"=rr.BvC$pvalue)
} else {
stop("Please check the list of methods.")
}
ptables[[mm]] <- ptab
}
return(ptables)
}
##############################
## produce some summary tables
##############################
## overall significance
sumfun <- function(pvals, DEGs, alpha=0.05) {
ngenes <- length(pvals); m1 <- length(DEGs); m0 <- ngenes - m1
stat.power <- sum(pvals[DEGs]<alpha) / m1
NDEGs <- setdiff(1:ngenes, DEGs)
typeI.error <- sum(pvals[NDEGs]<alpha)/m0
return(c(stat.power=stat.power, typeI.error=typeI.error))
}
Sim2 <- function(mus, ns, kappa, a, l, u){
mm <- sapply(mus, length); G <- length(mm)
if (var(mm) !=0) {
stop("mus must be a list of three vectors of mean log-counts with the same lengths.") } else {
ngenes <- mm[1]
}
Y <- NULL; alphas <- c()
for (g in 1:G){
## generate alpha.j
alphas.g <- runif(ns[g], min=l, max=u); alphas <- c(alphas, alphas.g)
nus.g <- 2^(mus[[g]]) %*% t(alphas.g)
## turn nus.g, kappa, and a into gamma_g and p_g in NB model
gg <- nus.g^(2-a)/kappa; pg <- gg/(nus.g + gg)
Yg <- matrix(mapply(function(g,p) {rnbinom(n=1, size=g, prob=p)}, gg, pg),
nrow=ngenes)
Y <- cbind(Y,Yg)
}
return(list(counts=Y, alphas=alphas))
}
getwd()
setwd("~/Dropbox/Superdelta_Ahead_Study/superdelta2/man")
file.path(R.home("doc"), "KEYWORDS")
rm(list=ls())
data(SampleData)
Sim1 <- function(nus, ns, kappa, a, l, u){
mm <- sapply(nus, length); G <- length(mm)
if (var(mm) !=0) {
stop("nus must be a list of three vectors of mean counts with the same lengths.") } else {
ngenes <- mm[1]
}
X <- NULL
for (g in 1:G){
gg <- nus[[g]]^(2-a)/kappa; pg <- gg/(nus[[g]]+gg)
Xg <- t(sapply(1:ngenes, function(i) rnbinom(ns[1], size = gg[i], prob = pg[i])))
X <- cbind(X, Xg)
}
## add sample specific noise
alphas <- runif(n1 + n2 + n3, min = l, max = u)
Y <- round(sweep(X, 2, alphas, "*"))
## return the counts
return(Y)
}
############################################################
## H-T based on super-delta and limma
############################################################
## this is the main wrapper function that conducts all tests in one
## line. To avoid unnecessary complications, I decide to use
## unadjusted p-values for comparison in this wrapper.  For
## simplicity, right now this function only works for *three groups*
## cases with the specific "Groups" input!!
wrapperfun <- function(counts, Groups, W, methods=c("SuperDelta", "rowFtests", "limma", "edgeR", "DESeq2"), trim=0.2) {
## some useful objects
design2 <- model.matrix(~ 0 + Groups)
mycontrast <- makeContrasts(AvB=GroupsA - GroupsB,
AvC=GroupsA - GroupsC,
BvC=GroupsB - GroupsC, levels = design2)
coldata <- data.frame(Group = factor(Groups))
colnames(coldata) <- "Groups"
## the main computation
ptables <- list()
for (mm in methods) {
if (mm=="SuperDelta") {
mod <- SuperDeltaWeighted(mydata = counts, offset = 1, Grps = Groups, W = NULL, trim = trim)
pt <- mod$pvalues.t; colnames(pt) <- c("AvB", "AvC", "BvC")
ptab <- cbind("overall" = mod$pvalues.F, pt)
} else if (mm=="rowFtests") {
logcounts <- log2(counts+1)
logA <- logcounts[, Groups=="A"]
logB <- logcounts[, Groups=="B"]
logC <- logcounts[, Groups=="C"]
G.AB <- Groups[Groups %in% c("A", "B")]
G.AC <- Groups[Groups %in% c("A", "C")]
G.BC <- Groups[Groups %in% c("B", "C")]
pF <- rowFtests(logcounts, fac=factor(Groups))[, "p.value"]
pt.AvB <- rowttests(cbind(logA, logB), fac=factor(G.AB))[,"p.value"]
pt.AvC <- rowttests(cbind(logA, logC), fac=factor(G.AC))[,"p.value"]
pt.BvC <- rowttests(cbind(logB, logC), fac=factor(G.BC))[,"p.value"]
ptab <- cbind("overall"=pF, "AvB"=pt.AvB, "AvC"=pt.AvC, "BvC"=pt.BvC)
} else if (mm=="limma") {
y <- voom(counts, design2, plot = FALSE)
## y$genes$Status <- status
fit <- lmFit(y, design2)
fit2 <- contrasts.fit(fit, mycontrast)
fit2 <- eBayes(fit2)
ptab <- cbind("overall"=fit2$F.p.value, fit2$p.value)
} else if (mm=="edgeR") {
dge <- calcNormFactors(DGEList(counts = counts))
z <- estimateDisp(dge, design2, robust = TRUE)
fit <- glmQLFit(z, design2, robust = TRUE)
anov1 <- glmQLFTest(fit, contrast = mycontrast)
#topTags(anov1)
qlf.AvB <- glmQLFTest(fit, contrast = mycontrast[,"AvB"])
qlf.AvC <- glmQLFTest(fit, contrast = mycontrast[,"AvC"])
qlf.BvC <- glmQLFTest(fit, contrast = mycontrast[,"BvC"])
ptab <- cbind("overall"=anov1$table$PValue, "AvB"=qlf.AvB$table$PValue,
"AvC"=qlf.AvC$table$PValue, "BvC"=qlf.BvC$table$PValue)
} else if (mm=="DESeq2") {
dds <- DESeqDataSetFromMatrix(countData = counts, colData = coldata,
design = ~ Groups)
dds <- DESeq(dds, test = "LRT", reduced= ~ 1)
rr <- as.data.frame(results(dds))
ddsPairwise <- DESeq(dds)
rr.AvB <- results(ddsPairwise, contrast = c("Groups", "A", "B"))
rr.AvC <- results(ddsPairwise, contrast = c("Groups", "A", "C"))
rr.BvC <- results(ddsPairwise, contrast = c("Groups", "B", "C"))
ptab <- cbind("overall"=rr$pvalue, "AvB"=rr.AvB$pvalue,
"AvC"=rr.AvC$pvalue, "BvC"=rr.BvC$pvalue)
} else {
stop("Please check the list of methods.")
}
ptables[[mm]] <- ptab
}
return(ptables)
}
##############################
## produce some summary tables
##############################
## overall significance
sumfun <- function(pvals, DEGs, alpha=0.05) {
ngenes <- length(pvals); m1 <- length(DEGs); m0 <- ngenes - m1
stat.power <- sum(pvals[DEGs]<alpha) / m1
NDEGs <- setdiff(1:ngenes, DEGs)
typeI.error <- sum(pvals[NDEGs]<alpha)/m0
return(c(stat.power=stat.power, typeI.error=typeI.error))
}
set.seed(2020)
## set.seed(2020)
SIM1 <- Sim1(nus, ns, kappa=0.6, a=2, l=10, u=20)
ngenes <- 5000; n1 <- n2 <- n3 <- 50; ns <- c(n1,n2,n3)
Groups <- c(rep("A",n1), rep("B",n2), rep("C",n3))
nu1 <- nu2 <- nu3 <- rep(100, ngenes)
nu2[1:600] <- 150; nu3[401:1000] <- 75
nus <- list(nu1, nu2, nu3)
## set.seed(2020)
SIM1 <- Sim1(nus, ns, kappa=0.6, a=2, l=10, u=20)
ngenes <- 5000; n1 <- n2 <- n3 <- 50; ns <- c(n1,n2,n3)
Groups <- c(rep("A",n1), rep("B",n2), rep("C",n3))
nu1 <- nu2 <- nu3 <- rep(100, ngenes)
nu2[1:600] <- 150; nu3[401:1000] <- 75
nus <- list(nu1, nu2, nu3)
set.seed(2020)
SIM1 <- Sim1(nus, ns, kappa=0.06, a=2.2, l=12, u=30)
mu1 <- mu2 <- mu3 <- rep(log2(100), ngenes)
mu2[1:600] <- log2(150); mu3[401:1000] <- log2(75)
mus <- list(mu1, mu2, mu3)
set.seed(2020)
mod2 <- Sim2(mus, ns, kappa = 0.06, a = 2.2, l = 12, u = 30)
SIM2 <- mod2$counts; alphas <- mod2$alphas
############################################################
## SIM2
############################################################
Sim2 <- function(mus, ns, kappa, a, l, u){
mm <- sapply(mus, length); G <- length(mm)
if (var(mm) !=0) {
stop("mus must be a list of three vectors of mean log-counts with the same lengths.") } else {
ngenes <- mm[1]
}
Y <- NULL; alphas <- c()
for (g in 1:G){
## generate alpha.j
alphas.g <- runif(ns[g], min=l, max=u); alphas <- c(alphas, alphas.g)
nus.g <- 2^(mus[[g]]) %*% t(alphas.g)
## turn nus.g, kappa, and a into gamma_g and p_g in NB model
gg <- nus.g^(2-a)/kappa; pg <- gg/(nus.g + gg)
Yg <- matrix(mapply(function(g,p) {rnbinom(n=1, size=g, prob=p)}, gg, pg),
nrow=ngenes)
Y <- cbind(Y,Yg)
}
return(list(counts=Y, alphas=alphas))
}
set.seed(2020)
mod2 <- Sim2(mus, ns, kappa = 0.06, a = 2.2, l = 12, u = 30)
SIM2 <- mod2$counts; alphas <- mod2$alphas
mu1 <- mu2 <- mu3 <- rep(log2(100), ngenes)
mu2[1:600] <- log2(150); mu3[401:1000] <- log2(50)
mus <- list(mu1, mu2, mu3)
set.seed(2020)
mod3 <- Sim2(mus, ns, kappa = 0.6, a = 2, l = 10, u = 20)
SIM3 <- mod3$counts; alphas <- mod3$alphas
getwd()
save(SIM1, SIM2, SIM3, file = "SampleData.RData")
